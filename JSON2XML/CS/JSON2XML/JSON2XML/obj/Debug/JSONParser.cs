//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Practice\JSON2XML\CS\JSON2XML\JSON2XML\JSON.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace JSON2XML {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class JSONParser : Parser {
	public const int
		T__6=1, T__5=2, T__4=3, T__3=4, T__2=5, T__1=6, T__0=7, LCURLY=8, LBRACK=9, 
		STRING=10, NUMBER=11, WS=12;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'null'", "','", "':'", "'false'", "'}'", "'true'", 
		"'{'", "'['", "STRING", "NUMBER", "WS"
	};
	public const int
		RULE_json = 0, RULE_object = 1, RULE_array = 2, RULE_pair = 3, RULE_value = 4;
	public static readonly string[] ruleNames = {
		"json", "object", "array", "pair", "value"
	};

	public override string GrammarFileName { get { return "JSON.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public JSONParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class JsonContext : ParserRuleContext {
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_json);
		try {
			State = 12;
			switch (_input.La(1)) {
			case LCURLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; @object();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11; array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
	 
		public ObjectContext() { }
		public virtual void CopyFrom(ObjectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnObjectContext : ObjectContext {
		public IReadOnlyList<PairContext> pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public AnObjectContext(ObjectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterAnObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitAnObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyObjectContext : ObjectContext {
		public EmptyObjectContext(ObjectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterEmptyObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitEmptyObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_object);
		int _la;
		try {
			State = 27;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				_localctx = new AnObjectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; Match(LCURLY);
				State = 15; pair();
				State = 20;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__4) {
					{
					{
					State = 16; Match(T__4);
					State = 17; pair();
					}
					}
					State = 22;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 23; Match(T__1);
				}
				break;

			case 2:
				_localctx = new EmptyObjectContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; Match(LCURLY);
				State = 26; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	 
		public ArrayContext() { }
		public virtual void CopyFrom(ArrayContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayOfValuesContext : ArrayContext {
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public IReadOnlyList<ValueContext> value() {
			return GetRuleContexts<ValueContext>();
		}
		public ArrayOfValuesContext(ArrayContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterArrayOfValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitArrayOfValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayOfValues(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyArrayContext : ArrayContext {
		public EmptyArrayContext(ArrayContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterEmptyArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitEmptyArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_array);
		int _la;
		try {
			State = 42;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				_localctx = new ArrayOfValuesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; Match(LBRACK);
				State = 30; value();
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__4) {
					{
					{
					State = 31; Match(T__4);
					State = 32; value();
					}
					}
					State = 37;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 38; Match(T__6);
				}
				break;

			case 2:
				_localctx = new EmptyArrayContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; Match(LBRACK);
				State = 41; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(STRING);
			State = 45; Match(T__3);
			State = 46; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayValueContext : ValueContext {
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArrayValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterArrayValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitArrayValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectValueContext : ValueContext {
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ObjectValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterObjectValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitObjectValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomContext : ValueContext {
		public ITerminalNode NUMBER() { return GetToken(JSONParser.NUMBER, 0); }
		public AtomContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public StringContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_value);
		try {
			State = 55;
			switch (_input.La(1)) {
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; Match(NUMBER);
				}
				break;
			case LCURLY:
				_localctx = new ObjectValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; @object();
				}
				break;
			case LBRACK:
				_localctx = new ArrayValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 51; array();
				}
				break;
			case T__0:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 52; Match(T__0);
				}
				break;
			case T__2:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 53; Match(T__2);
				}
				break;
			case T__5:
				_localctx = new AtomContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 54; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xE<\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x5\x2\xF\n\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x15\n\x3\f\x3\xE\x3\x18\v\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3\x1E\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4$\n\x4\f\x4\xE"+
		"\x4\'\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4-\n\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6:\n\x6\x3\x6\x2\x2\x2"+
		"\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2\x2\x41\x2\xE\x3\x2\x2\x2\x4\x1D\x3\x2"+
		"\x2\x2\x6,\x3\x2\x2\x2\b.\x3\x2\x2\x2\n\x39\x3\x2\x2\x2\f\xF\x5\x4\x3"+
		"\x2\r\xF\x5\x6\x4\x2\xE\f\x3\x2\x2\x2\xE\r\x3\x2\x2\x2\xF\x3\x3\x2\x2"+
		"\x2\x10\x11\a\n\x2\x2\x11\x16\x5\b\x5\x2\x12\x13\a\x5\x2\x2\x13\x15\x5"+
		"\b\x5\x2\x14\x12\x3\x2\x2\x2\x15\x18\x3\x2\x2\x2\x16\x14\x3\x2\x2\x2\x16"+
		"\x17\x3\x2\x2\x2\x17\x19\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x19\x1A\a\b\x2"+
		"\x2\x1A\x1E\x3\x2\x2\x2\x1B\x1C\a\n\x2\x2\x1C\x1E\a\b\x2\x2\x1D\x10\x3"+
		"\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1E\x5\x3\x2\x2\x2\x1F \a\v\x2\x2 %\x5\n"+
		"\x6\x2!\"\a\x5\x2\x2\"$\x5\n\x6\x2#!\x3\x2\x2\x2$\'\x3\x2\x2\x2%#\x3\x2"+
		"\x2\x2%&\x3\x2\x2\x2&(\x3\x2\x2\x2\'%\x3\x2\x2\x2()\a\x3\x2\x2)-\x3\x2"+
		"\x2\x2*+\a\v\x2\x2+-\a\x3\x2\x2,\x1F\x3\x2\x2\x2,*\x3\x2\x2\x2-\a\x3\x2"+
		"\x2\x2./\a\f\x2\x2/\x30\a\x6\x2\x2\x30\x31\x5\n\x6\x2\x31\t\x3\x2\x2\x2"+
		"\x32:\a\f\x2\x2\x33:\a\r\x2\x2\x34:\x5\x4\x3\x2\x35:\x5\x6\x4\x2\x36:"+
		"\a\t\x2\x2\x37:\a\a\x2\x2\x38:\a\x4\x2\x2\x39\x32\x3\x2\x2\x2\x39\x33"+
		"\x3\x2\x2\x2\x39\x34\x3\x2\x2\x2\x39\x35\x3\x2\x2\x2\x39\x36\x3\x2\x2"+
		"\x2\x39\x37\x3\x2\x2\x2\x39\x38\x3\x2\x2\x2:\v\x3\x2\x2\x2\b\xE\x16\x1D"+
		"%,\x39";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace JSON2XML
